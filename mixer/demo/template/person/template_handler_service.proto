// Copyright 2017 Istio Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// THIS FILE IS AUTOMATICALLY GENERATED BY MIXGEN.

syntax = "proto3";


// Example config:
// 
// ```shell
// apiVersion: "config.istio.io/v1alpha2"
// kind: person
// metadata:
//   name: person 
//   namespace: istio-system
// spec:
//   owner: destination.owner | "guest" 
//   age: destination.port | "24"
//   container_name: destination.container.name | "clever"
// ```
//
// The `person` template represents person info key, used to authorize API calls.
package person;


import "gogoproto/gogo.proto";
import "mixer/adapter/model/v1beta1/extensions.proto";
import "google/protobuf/any.proto";
import "mixer/adapter/model/v1beta1/check.proto";


option (istio.mixer.adapter.model.v1beta1.template_variety) = TEMPLATE_VARIETY_CHECK;
option (istio.mixer.adapter.model.v1beta1.template_name) = "person";

option (gogoproto.goproto_getters_all) = false;
option (gogoproto.equal_all) = false;
option (gogoproto.gostring_all) = false;

// HandlePersonService is implemented by backends that wants to handle request-time 'person' instances.
service HandlePersonService {
    // HandlePerson is called by Mixer at request-time to deliver 'person' instances to the backend.
    rpc HandlePerson(HandlePersonRequest) returns (istio.mixer.adapter.model.v1beta1.CheckResult);
    
}

// Request message for HandlePerson method.
message HandlePersonRequest {

    // 'person' instance.
    InstanceMsg instance = 1;

    // Adapter specific handler configuration.
    //
    // Note: Backends can also implement [InfrastructureBackend][https://istio.io/docs/reference/config/mixer/istio.mixer.adapter.model.v1beta1.html#InfrastructureBackend]
    // service and therefore opt to receive handler configuration during session creation through [InfrastructureBackend.CreateSession][TODO: Link to this fragment]
    // call. In that case, adapter_config will have type_url as 'google.protobuf.Any.type_url' and would contain string
    // value of session_id (returned from InfrastructureBackend.CreateSession).
    google.protobuf.Any adapter_config = 2;

    // Id to dedupe identical requests from Mixer.
    string dedup_id = 3;
}





// Contains instance payload for 'person' template. This is passed to infrastructure backends during request-time
// through HandlePersonService.HandlePerson.
message InstanceMsg {

    // Name of the instance as specified in configuration.
    string name = 72295727;
    
    // The owner being called (destination.owner).
    string owner = 1;
    
    // The age being called (destination.port).
    int64 age = 2;
    
    // The email_address being called (destination.labels["email_address"]).
    string email_address = 3;
    
}

// Contains inferred type information about specific instance of 'person' template. This is passed to
// infrastructure backends during configuration-time through [InfrastructureBackend.CreateSession][TODO: Link to this fragment].
message Type {
    
}


// Represents instance configuration schema for 'person' template.
message InstanceParam {
    
    // The owner being called (destination.owner).
    string owner = 1;
    
    // The age being called (destination.port).
    string age = 2;
    
    // The email_address being called (destination.labels["email_address"]).
    string email_address = 3;
    
}

